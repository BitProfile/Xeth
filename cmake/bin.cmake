function(VENDOR_CHECK_DOWNLOAD EXEC)
    if(MSVC OR WIN32)
        set(PLATFORM "windows")
        set(EXTENSION ".exe")
    else()
        set(EXTENSION "")
        if(APPLE)
            set(PLATFORM "osx")
        else()
            set(PLATFORM "linux")
        endif()
    endif()

    find_program(${EXEC}_PATH ${EXEC}${EXTENSION})

    if(${EXEC}_PATH)
        message(${EXEC} " - found ${${EXEC}_PATH}")
    else()
        message(${EXEC} " - not found")
    endif()


    if(NOT ${EXEC}_PATH AND NOT EXISTS ${PROJECT_BINARY_DIR}/vendor/bin/${EXEC}${EXTENSION})

        if(APPLE)
            set(ARCH "x86_64")
        else()
            include(CheckTypeSize)
            check_type_size("void*" SIZEOF_VOID_P BUILTIN_TYPES_ONLY)
            if(SIZEOF_VOID_P EQUAL 8)
                set(ARCH "x86_64")
            else()
                set(ARCH "x86")
            endif()
        endif()
        set(DOWNLOAD_URL "https://sourceforge.net/projects/xeth/files/${PLATFORM}/${ARCH}/${EXEC}${EXTENSION}/download")
        file(DOWNLOAD ${DOWNLOAD_URL} ${PROJECT_BINARY_DIR}/download/${EXEC}${EXTENSION} SHOW_PROGRESS)
        file(COPY ${PROJECT_BINARY_DIR}/download/${EXEC}${EXTENSION} DESTINATION ${PROJECT_BINARY_DIR}/vendor/bin FILE_PERMISSIONS OWNER_READ OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE NO_SOURCE_PERMISSIONS)
        file(REMOVE ${PROJECT_BINARY_DIR}/download/${EXEC}${EXTENSION})
    endif()

endfunction(VENDOR_CHECK_DOWNLOAD)


function(CHECK_BIN_PATH EXEC EXEC_PATH)
    if(MSVC OR WIN32)
        set(EXTENSION ".exe")
    else()
        set(EXTENSION "")
    endif()

    if(NOT EXISTS ${EXEC_PATH})
        message(FATAL_ERROR "${EXEC} not found in specified path (${EXEC_PATH})")
    endif()

endfunction(CHECK_BIN_PATH)

if(GETH_PATH)
    CHECK_BIN_PATH("geth" ${GETH_PATH})
    add_definitions(-D__GETH_PATH__=${GETH_PATH})
elseif(BIN_DOWNLOAD)
    VENDOR_CHECK_DOWNLOAD("geth")
else()
    message(FATAL_ERROR "geth not found, please use --GETH_PATH=... or --BIN_DOWNLOAD flags")
endif()

if(IPFS_PATH)
    CHECK_BIN_PATH("ipfs" ${IPFS_PATH})
    add_definitions(-D__IPFS_PATH__=${IPFS_PATH})
elseif(BIN_DOWNLOAD)
    VENDOR_CHECK_DOWNLOAD("ipfs")
else()
    message(FATAL_ERROR "ipfs not found, please use --IPFS_PATH=... or --BIN_DOWNLOAD flags")
endif()

